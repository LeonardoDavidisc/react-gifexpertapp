{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","console","log","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","setTimeout","useFetchGifs","image","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAIZC,mBAAS,IAJG,mBAIzCC,EAJyC,KAI7BC,EAJ6B,KAwBhD,OACE,sBAAMC,SAba,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAe,SAAAS,GAAG,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,KAIhBO,QAAQC,IAAI,iBAIZ,SACE,uBACEC,KAAK,OACLC,MAAQX,EACRY,SAtBoB,SAAET,GAC1BF,EAAcE,EAAEU,OAAOF,a,QCTZ,SAASG,EAAT,GAA0C,IAAnBC,EAAkB,EAAlBA,GAAIC,EAAc,EAAdA,MAAOC,EAAO,EAAPA,IAE/C,OADAT,QAAQC,IAAIM,EAAIC,EAAOC,GAErB,sBAAKC,UAAU,yCAAf,UACE,qBAAKC,IAAMF,EAAMG,IAAMJ,IACvB,4BAAKA,O,2BCNEK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEfN,EAFe,iDAEkCO,UAAWF,GAF7C,+DAGFG,MAAOR,GAHL,cAGfS,EAHe,gBAIAA,EAAKC,OAJL,uBAIdC,EAJc,EAIdA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACLhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAVjB,kBAiBdY,GAjBc,4CAAH,sDCIPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECDb,SAAEA,GAAe,IAAD,EAEhBvB,mBAAS,CACjC6B,KAAM,GACNO,SAAS,IAJ+B,mBAEnCC,EAFmC,KAE5BC,EAF4B,KA+B1C,OAxBAC,qBAAW,WAETjB,EAASC,GACNiB,MAAM,SAAAP,GACLQ,YAAY,WAEVhC,QAAQC,IAAIuB,GACZK,EAAS,CACPT,KAAMI,EACNG,SAAS,MAGV,UAGJ,CAACb,IASCc,ED1B0BK,CAAcnB,GAAlCU,EAJ0B,EAI/BJ,KAAaO,EAJkB,EAIlBA,QAcrB,OACE,qCACE,oBAAIjB,UAAU,oCAAd,SAAoDI,IAClDa,GAAW,mBAAGjB,UAAU,mCAAb,0BAIb,qBAAKA,UAAU,YAAf,SAIIc,EAAOF,KAAK,SAAAY,GAAK,OACf,cAAC5B,EAAD,eAEO4B,GADCA,EAAM3B,aEhCb4B,EAAe,WAAM,MAII5C,mBAAS,CAAC,cAJd,mBAIzB6C,EAJyB,KAIb9C,EAJa,KAehC,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEI8C,EAAWd,KAAK,SAAAR,GAAQ,OACtB,cAAC,EAAD,CAEEA,SAAWA,GADLA,Y,MCvBpBuB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.feb9b24d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n  //props o { setCategories }\n  //props.setCategories() o setCategories()\n\n  const [inputValue, setInputValue] = useState('');//Si se queda vacio es como si fuera un undefined, y marca error\n\n  //---START---PARA QUE SE PUEDA CAMBIAR EL TEXTO USANDO EL STATE\n  const handleInputChange = ( e ) => {\n    setInputValue(e.target.value);\n  }\n  //-----END---PARA QUE SE PUEDA CAMBIAR EL TEXTO USANDO EL STATE\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if( inputValue.trim().length > 2 ){\n      setCategories( cat => [inputValue, ...cat ]); //Agrega al inicio\n      setInputValue('');\n    }\n\n\n    console.log(\"Submit hecho\");\n  }\n\n  return (\n    <form onSubmit = { handleSubmit }>\n      <input\n        type=\"text\"\n        value={ inputValue }\n        onChange= { handleInputChange }\n      />\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n}","import React from 'react'\n\nexport default function GifGridItem( {id, title, url} ) {\n  console.log(id, title, url);\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={ url } alt={ title }/>\n      <p>{ title }</p>\n    </div>\n  )\n}\n","\nexport const getGifs = async( category ) => {\n    \n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category )}&limit=10&api_key=vf2Dgi5bFkT4U1kEb3W6D5oHdOffIgPb`;\n  const resp = await fetch( url );\n  const {data} = await resp.json();\n\n  const gifs = data.map( img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url,\n    }\n  });\n\n  //console.log(gifs);\n  //setImages(gifs);\n\n  return gifs;\n\n}\n","import React from 'react'\nimport GifGridItem from './GifGridItem';\n// import { getGifs } from '../helpers/getGifs';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nexport const GifGrid = ({ category }) => {\n\n  //const [images, setImages] = useState([]);\n\n  const { data:images, loading } = useFetchGifs( category );//Los custom hooks funcionan como functional components\n\n  // useEffect( () => {\n  //   //getGifts();\n    \n  //   getGifs( category )\n  //     //.then( images => setImages( images ))\n  //     .then( setImages )\n\n  // }, [ category ]);//[] son las dependencias. Aqui indica que solo se ejecutara cuando el componente es renderizado por primera vez. Seria \"ComponentDidMount\" con clases\n  // //[ category ] si la categoria cambia, volvera a correr la peticion\n  \n  // //getGifts();\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\n      { loading && <p className=\"animate__animated animate__flash\">'Loading...'</p> }\n\n      {/* { loading ? 'Cargando... ' : 'Dato cargado'} */}\n\n      <div className=\"card-grid\">\n\n        {\n          //data.map( image => (\n          images.map( image => (\n            <GifGridItem\n              key={ image.id }\n              { ...image }\n            />              \n          ))\n        }\n        \n        {\n          // images.map( (image) => {\n          //   //return <li key={ image.id }>{ image.title }</li>//Return explicito. si quisiera uno implicito pondria \"()\" en vez de \"{}\" despues de \"=>\"\n          //   return (\n          //     <GifGridItem\n          //       key={ image.id }\n          //       //image={ image }\n          //       { ...image }\n          //     />\n          //   )\n            \n          // })\n        }\n\n      </div> \n\n    </>\n  )\n}\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\n\nexport const useFetchGifs = ( category ) => {\n\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  });\n\n  useEffect( () => {\n      \n    getGifs( category )\n      .then( images => {\n        setTimeout( () => {\n\n          console.log(images)\n          setState({\n            data: images,\n            loading: false,\n          })\n\n        }, 3000)\n      })\n  \n    }, [category]);\n\n  // setTimeout( () => {\n  //   setState({\n  //     data: [1,2,3,4,5,6,7],\n  //     loading: false,\n  //   })\n  // }, 3000);\n\n  return state; // { data:[], loading: true };\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n  //const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\n\n  const [categories, setCategories] = useState(['One Punch']);\n\n  // const handleAdd = () => {\n  //   //setCategories('Jojo');//Asi lo convierte a string\n  //   //setCategories( [...categories, 'Jojo']); //Agrega al final\n  //   setCategories( ['Jojo', ...categories]); //Agrega al inicio\n\n  //   //setCategories( previousState => [ ...previousState, 'Jojo' ])\n\n  // }\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={ setCategories }/>\n      <hr />\n      \n      <ol>\n        {\n          categories.map( category => \n            <GifGrid \n              key={ category }\n              category={ category }\n            />\n          )\n        }\n      </ol>\n      \n    </>\n  )\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp.js';\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}